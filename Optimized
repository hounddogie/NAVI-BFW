@name NAVI BFW-official
@inputs Hip:entity Torso:entity #alignment
@inputs  Bsl Bsr R1 R2 R3 Batter Target Targ:entity Enable AimPos:vector  #[ Pos to aim at]#
@outputs Sx Sy SlaveE2s:array Master:entity Steer ReloadRockets Ang:angle Deploy W S Tdist M1 M2 M3 Timer Raise Facing X Lookin Y TurnUp TurnDown HardLeft HardRight  TurnLeft TurnRight Dang
@persist Rocketpodspeed Tdist Persue Dang Timer Facing Fang TurnUp TurnDown Bob
@persist T TRUE FALSE  E:entity
@persist UDsens LRsens UDsensH  LRsensH X Y
@persist UpLimit DownLimit Close
@persist Master:entity SC CreationTime Frm
@trigger Enable
# if(duped())
# {
    # reset()
# }
if(first())
{
    E=entity()
    TRUE=1
    FALSE=0# why would you ever change these
    UDsens=2 #u/d sensitivity
    LRsens=2
    UDsensH=9#15 #hard turn has an H
    LRsensH=9#15
    UpLimit=45 #I tried making soft limit for bfw head turning
    DownLimit=-45
    Close = 500 #how much personal space to give our target
    CreationTime = systime()
##############################
#Dunnah toucheh this
Sy=FALSE
Sx=FALSE
    holoCreate(FALSE)
    holoAng(FALSE,E:angles())
    holoParent(FALSE,E)
    holoModel(FALSE,"models/sprops/misc/axis_plane.mdl")
    dsJoinGroup(owner():steamID()+"NAVI_BFW") # incase multiple people on the server are using this same e2
	dsSetScope(10)
##############################
    function number clk_(Millis_:number, Go_:number) # oooooooooooo clock
	{
		local TimerName = Millis_:toString()
		if(clk(TimerName))
		{
			return TRUE
		}
		elseif(Go_)
		{
			timer(TimerName, Millis_)
			return FALSE
		}
	}
	
	function goLeft(Hard_)
	{
		HardRight   = FALSE
		HardLeft    = FALSE
		Facing      = FALSE
		TurnRight   = FALSE
		TurnLeft    = TRUE
		Steer       = -0.5
		if(Hard_)
		{
			HardLeft    = TRUE
			Steer       = -TRUE
		}
		
	}
	
	function goRight(Hard_)
	{	#same as above but right instead of left
		Facing      = FALSE
		TurnRight   = TRUE
		TurnLeft    = FALSE
		HardRight   = FALSE
		HardLeft    = FALSE
		Steer       = 0.5
		if(Hard_)
		{
			HardRight   = TRUE
			Steer       = TRUE
		}
	}
	function number straight()
	{
#		Facing      = TRUE
		TurnRight   = FALSE
		TurnLeft    = FALSE
		HardRight   = FALSE
		HardLeft    = FALSE
		Steer       = FALSE
Deploy=TRUE
  return TRUE
	}
	function look_up(Hard_)
	{
		TurnUp      = TRUE
		TurnDown    = FALSE
		Lookin      = FALSE
		if(Hard_)
		{
			
			
		}
	}
	function look_down(Hard_)
	{
		TurnUp      = TRUE
		TurnDown    = FALSE
		Lookin      = FALSE
		if(Hard_)
		{
			
		}
	}
	function number look()
	{
		Lookin      = TRUE
		TurnUp      = FALSE
		TurnDown    = FALSE
  return 1
	}
    function follow(Follow_)
	{
		if(clk_(50,Follow_)) #how do I turn B0ss?
		{
		
			if(Dang < -2.0)
			{  #am walke left
				goLeft(FALSE)
            }
            if(Dang < -15.0)
			{ #am walkeh super left
				goLeft(TRUE)
            }
		
			if(Dang > 2.0)
			{
				goRight(FALSE)
			}
            if (Dang > 15.0)
			{
				goRight(TRUE)
			}
			
			
			if(Dang>=-2&&Dang<=2)
			{ #Hey im going straight at the thing!
				straight()
			}
			if(Fang > 1.0)
			{
				look_up(FALSE)
			}
			elseif(Fang < -1.0)
			{
				look_down(FALSE)
			}
			else
			{
    Lookin=TRUE
				look()
			}
	
		}
        if(Tdist < Close)
		{ #woah too close, backin up'
            S      =    TRUE
            W      =    FALSE
            Deploy =    TRUE
        }
		else#oi, get back here
		{
            Deploy = FALSE
            S      = FALSE
            W      = TRUE
        }
        return
    }
	function void obstacleAvoidance(Avoid_)
	{
		if(clk_(20,Avoid_))
		{
			if(Bsr<50)
			{
				W = FALSE
				Steer=1
				timer("settle",2000)
			}
			if(Bsl<50)
			{	
				W = FALSE
				Steer=1
				timer("settle",2000)
			}
			if(clk("settle"))
			{
				W = FALSE
				Steer=0
			}
		}
	}
    function void rocketLogic(Dothelogics_)
	{
		if(clk_(Rocketpodspeed,Dothelogics_))#Podspeed you magnificent rocket
		{	###force the launching of rockets
			if(Batter)
			{
				ReloadRockets=FALSE
				Timer++
            }
            if(Timer==50&&Batter&&R1)
			{
                M1=TRUE
                M3=FALSE
                Timer++
            }
            if(Timer==100&&Batter&&R2)
			{
                M1=FALSE
                M2=TRUE
                Timer++
            }
            if(Timer==150&&Batter&&R3)
			{
                M3=TRUE
                M2=FALSE
                Timer++
                timer("m2",800)
            }
            if(Timer>450)
			{
                Timer=FALSE
            }
			if(R1==TRUE&R2==TRUE&R3==TRUE)#if all rockets reload,
			{
				Ready=TRUE
			}
			if(R1==FALSE&&R2==FALSE&&R3==FALSE)
			{
				Ready=FALSE
			}
		
			else
			{
				M1=FALSE
				M2=FALSE
				M3=FALSE
				Timer=FALSE
				ReloadRockets=TRUE
            }
			if(R1==FALSE&&R2==FALSE&&R3==FALSE)
			{
            Ready=FALSE
			}
			else
			{
				M1=FALSE
				M2=FALSE
				M3=FALSE
				Timer=FALSE
				ReloadRockets=TRUE
			}
			if(Facing&&Lookin&&R1&&R2&&R3&&Tdist<=6500)
			{
				Raise=TRUE
			}
			else
			{
				Raise=FALSE
            }
		}
	}
    function void idManagement()
	{
        local Time = systime()
        if(!Master:isValid())
		{
            if(first())
			{ #request status at start
                dsSend("leader_check",owner():steamID()+"NAVI_BFW",1)
            }
			elseif(Time - CreationTime >= 0.5)
			{ #if no one replies in 0.5 second, become master chip and alert any other spawned chips
                Master = E
                dsSend("i_am",owner():steamID()+"NAVI_BFW",E)
                print(E:id() + " becoming master chip")
            }
        }
        if(dsClk("i_am"))
		{ #receiving who the master chip is
            local IncomingData = dsGetEntity()
            if(Master:isValid())
			{
                if(IncomingData != Master)
				{
                    #[
                        uh oh, multiple chips were spawned at once with no master
                     ]#
                    error("multiple chips spawned at the exact same time. master/slave system confused. spawn 1 master first before doing this")
                }
            }
			else
			{
                #chip needs master, found it.
                Master = dsGetEntity()
                print("chip " + E:id() + " swearing loyalty to " + Master:id())
            }
        }
        if(dsClk("leader_check") & Master == E)
		{ #if this chip is the master chip, tell them whats up
            dsSend("i_am",owner():steamID()+"NAVI_BFW",E)
        }
      ################################arrays >_<
        if(Master == E){
            if(clk_(1000,TRUE)){ #if this chip is the master, compile the list of slave e2s every second
                SlaveE2s = dsProbe(owner():steamID()+"NAVI_BFW")
                dsSend("slaveList",owner():steamID()+"NAVI_BFW",SlaveE2s)
            }
        }else{
            if(dsClk("slaveList")){
                SlaveE2s = dsGetArray()
            }
        }      
    }
    
    
      
       
    function void think()
	{
		if(Hip&Torso)
		{
    if(Targ){
        
			Dang = Hip:bearing(AimPos)
			Fang = Torso:elevation(AimPos)
		}
		else
		{
			Dang = E:bearing(AimPos)
			Fang = E:elevation(AimPos)
		}
		if(Targ)
		{
			Tdist= Targ:pos():distance(E:pos())
		}
        if(TurnUp)
		{
			Y=Y+UDsens
			Y=$Y*UDsens+Y#dont ask me later, its a sort of smoother :v
		}
		if(Y>UpLimit)
		{
			Y=UpLimit#that soft quota for the head
		}
		elseif(TurnDown)
		{
			Y=Y-UDsens
			Y=$Y*-UDsens+Y
		}
		if(Y<DownLimit)
		{
			Y=DownLimit
		}
        if(TurnLeft)
		{
			X=X-LRsens
			X=$X*-LRsens+X
		}
		elseif(TurnRight)
		{
			X=X+LRsens
			X=$X*LRsens+X
		}
		else
		{
			
		}
		if(HardRight)
		{
			X=X+LRsensH
			X=$X*LRsensH+X
		}
		elseif(HardLeft)
		{
			X=X-LRsensH
			X=$X*-LRsensH+X
		}
		else
		{}
        #Ang = E:angles()   Wait why is this here
		
    }
}
function formation()
    {
        SC = SlaveE2s:count()
        
        if(Master == entity()){
            local RowSize = 5     
            
            local XOffset = 0
            local XSpacing = 30
    
            local YOffset = 0        
            local YSpacing = 30

            if(changed(SC)){
                local SCChange = $SC
                print(SCChange)
                
                if(SCChange > 0){ #if we gained       
                    for(I=1,SC){ #creation of new holos
                        if(!holoEntity(I):isValid()){
                            local CleanDivide = int(I/RowSize) == I/RowSize
                            
                            local X = CleanDivide ? RowSize - 1 : I % RowSize - 1
                            local Y = CleanDivide ? I/RowSize - 1 : int(I/RowSize)
                            
                            #[
                            I     1,2,3,4,5, 6,7,8,9,10, 11,12,13,14,15
                            X      0,1,2,3,4, 0,1,2,3,4,  0, 1, 2, 3, 4
                            Y      0,0,0,0,0, 1,1,1,1,1,  2, 2, 2, 2, 2
                            I/X   0.1-1      1.1-2       2.1-3
                            ]#           
                            
                            holoCreate(I)
                            holoParent(I,entity())
                            holoPos(I,entity():toWorld(vec(X*XSpacing + XOffset,Y*YSpacing + YOffset,0)))
                        }
                    }
                }else{ #if we lost    
                    #delete old holos 
                    for(I=SC+1,SC+abs(SCChange)){
                        holoDelete(I)
                    }
                    
                }
            }        
        }
        
    }
}
interval(32)
idManagement()
follow(1)
think()
formation()
